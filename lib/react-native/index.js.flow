// @flow

import { Animated, Dimensions, Platform, StatusBar } from 'react-native'

type AnimateMethod = string;
type AnimateDriver = *;
type AnimatedOpts = {};
type AnimateArgs = [
    AnimateMethod,
    AnimateDriver,
    AnimateArgs
]
export function animate(method:AnimateMethod | AnimateArgs[], driver: AnimateDriver, opts: AnimatedOpts): Promise<boolean> {
    // resolves to true on succesfully completion, resolves to false if canceld with stopAnimation (i havent seen any other cases for false yet)
    // either one argument of array of arrays OR three arguments of "method, driver, opts"

    let anim;
    if (Array.isArray(method)) {
        const multi = method;
        const anims = multi.map( ([method, driver, opts]) => {
            // opts.useNativeDriver = true;
            const anim = Animated[method](driver, opts);
            return anim;
        });
        anim = Animated.parallel(anims);
    } else {
        // opts.useNativeDriver = true;
        anim = Animated[method](driver, opts);
    }
    return new Promise( resolve => anim.start( ({ finished })=>resolve(finished) ) );
}

export function getBarHeights(): { status: number, soft?: number } {
    /* returns
    {
        status: number // SatusBar
        soft: number / SoftBar - Android only
    }
    */
    switch (Platform.OS) {
        case 'ios': return { status:20 };
        case 'android': {
            const window = Dimensions.get('window');
            const screen = Dimensions.get('screen');
            // const SCALE = window.scale; // same as get screen.scale

            // console.log('window:', Dimensions.get('window'))
            // console.log('screen:', Dimensions.get('screen'))
            // console.log('StatusBarManager.HEIGHT:', NativeModules.StatusBarManager, 'StatusBar.currentHeight:', StatusBar.currentHeight)
            const SoftBarHeight = testIsPortrait() ? screen.height - window.height : screen.width - window.width;
            const StatusBarHeight = StatusBar.currentHeight;
            // console.log('SoftBarHeight:', SoftBarHeight);
            // console.log('StatusBarHeight:', StatusBarHeight, 'SoftBarHeight / SCALE:', SoftBarHeight / SCALE);

            return { status:StatusBarHeight, soft:SoftBarHeight };
        }
        // no default
    }
}

export function testIsPortrait(): boolean {
    const { height, width } = Dimensions.get('screen');
    return height > width;
}
